package cls.exploit.fragment;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Fragment;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.Html;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.google.android.gms.ads.AdView;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;

import cls.exploit.R;
import cls.util.Ads;
import cls.util.CustomAdapter;
import cls.util.FeedParser;
import cls.util.Item;

public class ExploitDatabase extends Fragment {

    private static ListView listView;
    private static ProgressBar pbar;
    private static ArrayList<Item> items;
    private static View rootView;
    private static Activity c;
    private AdView adView;

    public static ExploitDatabase newInstance() {

        return new ExploitDatabase();
    }

    public ExploitDatabase() {


    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        c = getActivity();
        rootView = inflater.inflate(R.layout.fragment_exploit, container, false);
        assert rootView != null;
        adView= Ads.ads(c,rootView);
        loadData(rootView);
        return rootView;
    }

    public static void loadData(View rootView) {

        if (isOnline(c)) {
            listView = (ListView) rootView.findViewById(R.id.listview);
            pbar = (ProgressBar) rootView.findViewById(R.id.progressBar);
            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> adapter, View v, int position,
                                        long arg3) {
                    showExploit(position);
                }
            });
            refreshExploit();
        } else {
            TextView errore = (TextView) rootView.findViewById(R.id.errore);
            errore.setVisibility(View.VISIBLE);
            errore.setText(c.getString(R.string.errore));
        }
    }

    public static void showExploit(int i) {
        String textViewCategory;
        final int position = i;
        AlertDialog.Builder builder = new AlertDialog.Builder(c);

        View viewAlertDialog = c.getLayoutInflater().inflate(R.layout.customdialog, null);

        assert viewAlertDialog != null;
        TextView nome = (TextView) viewAlertDialog.findViewById(R.id.nome);
        nome.setText(items.get(i).title);

        TextView cat = (TextView) viewAlertDialog.findViewById(R.id.categoria);
        textViewCategory = "<font color='#000000'> " + c.getString(R.string.cat_string) + "</font> " + items.get(i).category;

        cat.setText(Html.fromHtml(textViewCategory));

        TextView desc = (TextView) viewAlertDialog.findViewById(R.id.desc);
        desc.setText(c.getString(R.string.desc_string) + items.get(i).description);

        TextView data = (TextView) viewAlertDialog.findViewById(R.id.data);
        data.setText(c.getString(R.string.data_string) + items.get(i).date);

        builder.setView(viewAlertDialog)
                // Add action buttons
                .setPositiveButton(c.getString(R.string.open_url), new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int id) {
                        Intent tmp = new Intent(Intent.ACTION_VIEW);
                        tmp.setData(Uri.parse(items.get(position).link));
                        c.startActivity(tmp);
                    }
                })
                .setNegativeButton(c.getString(R.string.close_url), new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        dialog.cancel();
                    }
                });


        AlertDialog alertDialog = builder.create();
        alertDialog.show();

    }

    public static void UpdateUI(String result) {
        listView.setAdapter(null);
        items = FeedParser.parseXml(result, c);
        CustomAdapter adapter = new CustomAdapter(c, R.layout.customrow, items);
        listView.setAdapter(adapter);
        //mostro il listview
        pbar.setVisibility(View.GONE);
        listView.setVisibility(View.VISIBLE);
    }


    public static class DownloadFeed extends AsyncTask<String, Void, String> {
        String urldisplay;

        public DownloadFeed() {
        }

        protected String doInBackground(String... urls) {
            urldisplay = urls[0];
            InputStream is;
            StringBuilder sb;
            try {
                DefaultHttpClient client = new DefaultHttpClient();
                HttpGet request = new HttpGet(urldisplay);
                HttpResponse response = client.execute(request);
                HttpEntity entity = response.getEntity();
                is = entity.getContent();
                sb = new StringBuilder();

                BufferedReader reader;
                reader = new BufferedReader(new InputStreamReader(is));
                String line;

                while ((line = reader.readLine()) != null) {
                    sb.append(line);
                }
                reader.close();

            } catch (Exception e) {
                sb = new StringBuilder("");
            }
            return sb.toString();
        }

        protected void onPostExecute(String result) {
            UpdateUI(result);
        }
    }

    public static void refreshExploit() {
        listView.setVisibility(View.GONE);
        pbar.setVisibility(View.VISIBLE);
        new ExploitDatabase.DownloadFeed().execute("http://www.exploit-db.com/rss.xml");
    }

    public static boolean isOnline(Context ctx) {
        ConnectivityManager cm = (ConnectivityManager) ctx
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        return cm.getActiveNetworkInfo() != null
                && cm.getActiveNetworkInfo().isConnectedOrConnecting();
    }

    @Override
    public void onResume() {
        super.onResume();
        loadData(rootView);
        adView.resume();
    }

    @Override
    public void onDestroy() {
        adView.destroy();
        super.onDestroy();
    }

    @Override
    public void onPause() {
        adView.pause();
        super.onPause();
    }
}
